#!/usr/bin/env node

/**
 * Module dependencies.
 */

var inspect = require('util').inspect;
var program = require('commander');
var pkg = require('../package');
var moment = require('moment');
var fmt = require('printf');
var ES = require('..');

// options

program
  .version(pkg.version)
  .usage('[options] [query]')
  .option('-u, --url <url>', 'elastic search url')
  .option('-T, --types', 'output log types')
  .parse(process.argv);

// setup

var es = new ES({
  url: program.url
});

// types

if (program.types) {
  return es.mapping(function(err, res){
    if (err) throw err;
    var indexes = Object.keys(res);
    var types = Object.keys(res[indexes[0]]);

    console.log();
    types.forEach(function(type){
      console.log('  - %s', type);
    });
    console.log();
  });
}

// query

var str = program.args.join(' ');

var query = es.query(str, {
  size: ~~program.max
});

// output

query.on('data', function(logs){
  logs.map(output);
});

/**
 * Format output for `log`.
 */

function output(log) {
  var format = 'MMMM Do, h:mm:ssa';
  var date = moment(log.timestamp).format(format);
  var host = log.hostname;
  var msg = log.message;
  var level = log.level;
  var type = log.type;

  var color = '0';
  if ('warn' == level) color = '33';
  if ('error' == level) color = '31';
  if ('fatal' == level) color = '31';

  console.log();
  console.log('  \033[1mtype:\033[0m %s', type);
  console.log('  \033[1mhost:\033[0m %s', host);
  console.log('  \033[1mlevel:\033[0m \033[' + color + 'm%s\033[0m', level);
  console.log('  \033[1mdate:\033[0m %s', date);
  msg = inspect(msg, { colors: true, depth: Infinity });
  console.log();
  console.log('  %s', msg);
  console.log();
}
